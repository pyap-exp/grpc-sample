# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import supplier_pb2 as supplier__pb2


class SupplierStub(object):
    """The Inventory service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getSource = channel.unary_unary(
                '/supplier.Supplier/getSource',
                request_serializer=supplier__pb2.GetSourceRequest.SerializeToString,
                response_deserializer=supplier__pb2.GetSourceResponse.FromString,
                )
        self.setSource = channel.unary_unary(
                '/supplier.Supplier/setSource',
                request_serializer=supplier__pb2.SetSourceRequest.SerializeToString,
                response_deserializer=supplier__pb2.SetSourceResponse.FromString,
                )


class SupplierServicer(object):
    """The Inventory service definition.
    """

    def getSource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setSource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SupplierServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getSource': grpc.unary_unary_rpc_method_handler(
                    servicer.getSource,
                    request_deserializer=supplier__pb2.GetSourceRequest.FromString,
                    response_serializer=supplier__pb2.GetSourceResponse.SerializeToString,
            ),
            'setSource': grpc.unary_unary_rpc_method_handler(
                    servicer.setSource,
                    request_deserializer=supplier__pb2.SetSourceRequest.FromString,
                    response_serializer=supplier__pb2.SetSourceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'supplier.Supplier', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Supplier(object):
    """The Inventory service definition.
    """

    @staticmethod
    def getSource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/supplier.Supplier/getSource',
            supplier__pb2.GetSourceRequest.SerializeToString,
            supplier__pb2.GetSourceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setSource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/supplier.Supplier/setSource',
            supplier__pb2.SetSourceRequest.SerializeToString,
            supplier__pb2.SetSourceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
